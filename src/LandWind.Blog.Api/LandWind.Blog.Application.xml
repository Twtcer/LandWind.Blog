<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LandWind.Blog.Application</name>
    </assembly>
    <members>
        <member name="M:LandWind.Blog.Application.Authorize.AuthorizeService.GetAuthorizeUrlAsync(System.String)">
            <summary>
            Get authorize url
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LandWind.Blog.Application.Authorize.AuthorizeService.GenerateTokenAsync(System.String,System.String,System.String)" -->
        <member name="M:LandWind.Blog.Application.Authorize.AuthorizeService.GenerateTokenAsync(LandWind.Blog.Application.Users.IUserService,LandWind.Blog.Core.Dto.Authorize.AccountInput)">
            <summary>
            Generate token by account.
            </summary>
            <param name="userService"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Authorize.AuthorizeService.SendAuthorizeCodeAsync">
            <summary>
            Send authorization code
            </summary>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Authorize.IAuthorizeService.GetAuthorizeUrlAsync(System.String)">
            <summary>
            获取授权地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Authorize.IAuthorizeService.GenerateTokenAsync(System.String)">
            <summary>
            获取Token
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Authorize.IAuthorizeService.GenerateTokenAsync(System.String,System.String,System.String)">
            <summary>
            获取Token
            </summary>
            <param name="type"></param>
            <param name="code"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Authorize.IAuthorizeService.GenerateTokenAsync(LandWind.Blog.Application.Users.IUserService,LandWind.Blog.Core.Dto.Authorize.AccountInput)">
            <summary>
            
            </summary>
            <param name="userService"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Authorize.IAuthorizeService.SendAuthorizeCodeAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:LandWind.Blog.Application.Authorize.OAuth.IOAuthService`2">
            <summary>
            授权接口
            </summary>
            <typeparam name="TAccessToken"></typeparam>
            <typeparam name="TUserInfo"></typeparam>
        </member>
        <member name="T:LandWind.Blog.Application.Authorize.OAuth.OAuthServiceBase`3">
            <summary>
            OAuth 基类
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="TAccessToken"></typeparam>
            <typeparam name="TUserInfo"></typeparam>
        </member>
        <member name="T:LandWind.Blog.Application.Blog.BlogService">
            <summary>
            BlogService
            </summary>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.StatisticsService.GetStatisticsAsync">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.BlogPostService.InsertAsync(LandWind.Blog.Core.Dto.Blog.CreatePostInput)">
            <summary>
            Add post
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.BlogPostService.DeleteAsync(System.Int32)">
            <summary>
            Delete post by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.BlogPostService.GetAsync(System.Int32)">
            <summary>
            Get post by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.IBlogService`4.QueryAsync(LandWind.Blog.Core.Response.Base.PagingInput)">
            <summary>
            分页查询 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.IBlogService`4.QueryAsync(System.Int32,System.Int32,System.Func{System.Threading.Tasks.Task{LandWind.Blog.Core.Response.Base.ResponseResult{LandWind.Blog.Core.Response.Base.PagedList{`0}}}})">
            <summary>
            分页查询
            </summary>
            <param name="page"></param>
            <param name="limit"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.IBlogService`4.GetAsync(System.Int32)">
            <summary>
            获取单个模型
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.IBlogService`4.InsertAsync(`1)">
            <summary>
            添加
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.IBlogService`4.DeleteAsync(System.Int32)">
            <summary>
            删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Blog.IBlogService`4.UpdateAsync(System.Int32,`2)">
            <summary>
            更新
            </summary>
            <param name="id"></param>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:LandWind.Blog.Application.Blog.IStatisticsService">
            <summary>
            报表接口
            </summary>
        </member>
        <member name="T:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheKeys">
            <summary>
            CacheKeys
            </summary>
        </member>
        <member name="T:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy">
            <summary>
            缓存过期时间策略
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.OneDay">
            <summary>
            1day 24h
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.HalfDay">
            <summary>
             12h 
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.EightHours">
            <summary>
            8h
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.FourHours">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.ThreeHours">
            <summary>
            3小时过期
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.TwoHours">
            <summary>
            2小时过期
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.OneHours">
            <summary>
            1小时过期
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.HalfHours">
            <summary>
            半小时过期
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.FiveMinute">
            <summary>
            5分钟过期
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.OneMinute">
            <summary>
            1分钟过期
            </summary>
        </member>
        <member name="F:LandWind.Blog.Application.Caching.ApplicationCachingConsts.CacheStrategy.Never">
            <summary>
            永不过期
            </summary>
        </member>
        <member name="T:LandWind.Blog.Application.Caching.CachingServiceBase">
            <summary>
            缓存服务基类注入
            </summary>
        </member>
        <member name="M:LandWind.Blog.Application.Caching.CachingServiceBase.RemoveAsync(System.String)">
            <summary>
            移除键
            </summary>
            <returns></returns>
        </member>
        <member name="T:LandWind.Blog.Application.Tool.ToolService">
            <summary>
             ToolService
            </summary>
        </member>
        <member name="M:LandWind.Blog.Application.Tool.ToolService.GetBingBackgroundImgAsync">
            <summary>
            获取必应背景图
            </summary>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Tool.ToolService.GetBingBackgroundUrlAsync">
            <summary>
            获取必应背景图地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Tool.ToolService.GetImgAsync(System.String)">
            <summary>
            get img 
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Tool.ToolService.Ip2RegionAsync(System.String)">
            <summary>
            get ip region 
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Application.Tool.ToolService.SendMessageAsync(LandWind.Blog.Core.Dto.Tools.SendMessageInput)">
            <summary>
            send msg by wechat 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Core.Caching.IBlogCacheService`1.GetPageAsync(System.Int32,System.Int32,System.Func{System.Threading.Tasks.Task{LandWind.Blog.Core.Response.Base.ResponseResult{LandWind.Blog.Core.Response.Base.PagedList{`0}}}})">
            <summary>
            获取分页列表
            </summary>
            <param name="page"></param>
            <param name="limit"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Core.Caching.IBlogCacheService`1.GetListAsync(System.Func{System.Threading.Tasks.Task{LandWind.Blog.Core.Response.Base.ResponseResult{System.Collections.Generic.List{`0}}}})">
            <summary>
            获取列表
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:LandWind.Blog.Core.Caching.IBlogPostCacheService">
            <summary>
            IBlogPostCacheService
            </summary>
        </member>
        <member name="M:LandWind.Blog.Core.Caching.IBlogPostCacheService.GetPostByUrlAsync(System.String,System.Func{System.Threading.Tasks.Task{LandWind.Blog.Core.Response.Base.ResponseResult{LandWind.Blog.Core.Dto.Blog.PostDetailDto}}})">
            <summary>
            Get post by url from the cache.
            </summary>
            <param name="url"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Core.Caching.IBlogPostCacheService.GetPostsByCategoryAsync(System.String,System.Func{System.Threading.Tasks.Task{LandWind.Blog.Core.Response.Base.ResponseResult{System.Collections.Generic.List{LandWind.Blog.Core.Dto.Blog.QueryPostDto}}}})">
            <summary>
            Get the list of posts by category from the cache.
            </summary>
            <param name="category"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:LandWind.Blog.Core.Caching.IBlogPostCacheService.GetPostsByTagAsync(System.String,System.Func{System.Threading.Tasks.Task{LandWind.Blog.Core.Response.Base.ResponseResult{System.Collections.Generic.List{LandWind.Blog.Core.Dto.Blog.QueryPostDto}}}})">
            <summary>
            Get the list of posts by tag from the cache.
            </summary>
            <param name="tag"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:LandWind.Blog.Core.Caching.IBlogTagCacheService">
            <summary>
            IBlogTagCacheService
            </summary>
        </member>
        <member name="T:LandWind.Blog.Core.Caching.IBlogCategoryCacheService">
            <summary>
            IBlogCategoryCacheService
            </summary>  
        </member>
        <member name="T:LandWind.Blog.Core.Caching.IBlogFriendLinkCacheService">
            <summary>
            IBlogFriendLinkCacheService
            </summary>
        </member>
        <member name="M:LandWind.Blog.Core.Caching.LandWindBlogApplicationCachingExtensions.GetOrAddAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            获取缓存对象，不存在则添加
            </summary>
            <typeparam name="TCacheItem"></typeparam>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="factory"></param>
            <param name="minutes"></param>
            <returns></returns>
        </member>
    </members>
</doc>
